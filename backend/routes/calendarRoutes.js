const express = require('express');
const ical = require('node-ical');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs').promises;
const path = require('path');
const Meeting = require('../models/Meeting');

const router = express.Router();

// Helper function to generate ICS content
function generateICSContent(event) {
  const now = new Date();
  const startDate = new Date(event.date);
  const endDate = new Date(startDate.getTime() + (event.duration || 60) * 60000); // Default 1 hour

  const formatDate = (date) => {
    return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
  };

  const icsContent = `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Smart Meeting Assistant//Meeting Follow-up//EN
CALSCALE:GREGORIAN
METHOD:PUBLISH
BEGIN:VEVENT
UID:${event.eventId || uuidv4()}@meetingassistant.com
DTSTART:${formatDate(startDate)}
DTEND:${formatDate(endDate)}
SUMMARY:${event.title}
DESCRIPTION:${event.description || 'Follow-up meeting generated by Smart Meeting Assistant'}
LOCATION:${event.location || 'TBD'}
STATUS:CONFIRMED
ATTENDEE:${event.attendees ? event.attendees.map(email => `mailto:${email}`).join('\n') : ''}
CREATED:${formatDate(now)}
LAST-MODIFIED:${formatDate(now)}
END:VEVENT
END:VCALENDAR`;

  return icsContent;
}

// POST /api/calendar/generate-ics/:meetingId - Generate ICS file for meeting follow-ups
router.post('/generate-ics/:meetingId', async (req, res) => {
  try {
    const meeting = await Meeting.findById(req.params.meetingId);

    if (!meeting) {
      return res.status(404).json({ error: 'Meeting not found' });
    }

    const { title, date, attendees, location, duration } = req.body;

    const event = {
      eventId: uuidv4(),
      title: title || `${meeting.title} - Follow-up`,
      date: new Date(date) || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // Default: 1 week from now
      attendees: attendees || meeting.participants.map(p => p.email).filter(Boolean),
      location: location || 'TBD',
      duration: duration || 60,
      description: `Follow-up meeting for: ${meeting.title}\n\nAction Items:\n${meeting.processedData.actionItems?.map(item => `- ${item.task} (${item.assignedTo})`).join('\n') || 'No action items'
        }`
    };

    const icsContent = generateICSContent(event);

    // Save calendar event to meeting
    if (!meeting.calendarEvents) {
      meeting.calendarEvents = [];
    }

    meeting.calendarEvents.push({
      eventId: event.eventId,
      title: event.title,
      date: event.date,
      attendees: event.attendees,
      icsGenerated: true
    });

    await meeting.save();

    // Create downloads directory if it doesn't exist
    const downloadsDir = path.join(__dirname, '../downloads');
    try {
      await fs.access(downloadsDir);
    } catch {
      await fs.mkdir(downloadsDir, { recursive: true });
    }

    // Save ICS file
    const fileName = `meeting-followup-${event.eventId}.ics`;
    const filePath = path.join(downloadsDir, fileName);
    await fs.writeFile(filePath, icsContent);

    res.json({
      success: true,
      eventId: event.eventId,
      fileName: fileName,
      downloadUrl: `/api/calendar/download-ics/${fileName}`,
      event: {
        title: event.title,
        date: event.date,
        attendees: event.attendees,
        location: event.location
      },
      message: 'ICS file generated successfully'
    });

  } catch (error) {
    console.error('ICS generation error:', error);
    res.status(500).json({
      error: 'Failed to generate ICS file',
      details: error.message
    });
  }
});

// GET /api/calendar/download-ics/:fileName - Download ICS file
router.get('/download-ics/:fileName', async (req, res) => {
  try {
    const fileName = req.params.fileName;
    const filePath = path.join(__dirname, '../downloads', fileName);

    // Check if file exists
    try {
      await fs.access(filePath);
    } catch {
      return res.status(404).json({ error: 'ICS file not found' });
    }

    res.setHeader('Content-Type', 'text/calendar');
    res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
    res.sendFile(filePath);

  } catch (error) {
    console.error('ICS download error:', error);
    res.status(500).json({
      error: 'Failed to download ICS file',
      details: error.message
    });
  }
});

// POST /api/calendar/create-action-item-reminders/:meetingId - Create calendar reminders for action items
router.post('/create-action-item-reminders/:meetingId', async (req, res) => {
  try {
    const meeting = await Meeting.findById(req.params.meetingId);

    if (!meeting) {
      return res.status(404).json({ error: 'Meeting not found' });
    }

    if (!meeting.processedData.actionItems || meeting.processedData.actionItems.length === 0) {
      return res.status(400).json({ error: 'No action items found for this meeting' });
    }

    const icsFiles = [];

    for (const actionItem of meeting.processedData.actionItems) {
      if (actionItem.deadline) {
        const reminderDate = new Date(actionItem.deadline);
        // Set reminder for 1 day before deadline
        reminderDate.setDate(reminderDate.getDate() - 1);

        const event = {
          eventId: uuidv4(),
          title: `Reminder: ${actionItem.task}`,
          date: reminderDate,
          attendees: actionItem.assignedTo !== 'Unassigned' ? [actionItem.assignedTo] : [],
          duration: 30,
          description: `Action Item Reminder\n\nTask: ${actionItem.task}\nAssigned to: ${actionItem.assignedTo}\nPriority: ${actionItem.priority}\nDeadline: ${actionItem.deadline}\n\nFrom meeting: ${meeting.title}`
        };

        const icsContent = generateICSContent(event);

        // Save ICS file
        const fileName = `action-reminder-${event.eventId}.ics`;
        const filePath = path.join(__dirname, '../downloads', fileName);
        await fs.writeFile(filePath, icsContent);

        icsFiles.push({
          actionItem: actionItem.task,
          fileName: fileName,
          downloadUrl: `/api/calendar/download-ics/${fileName}`,
          reminderDate: reminderDate
        });
      }
    }

    res.json({
      success: true,
      meetingId: meeting._id,
      reminders: icsFiles,
      message: `${icsFiles.length} action item reminders created`
    });

  } catch (error) {
    console.error('Action item reminders error:', error);
    res.status(500).json({
      error: 'Failed to create action item reminders',
      details: error.message
    });
  }
});

// GET /api/calendar/events/:meetingId - Get all calendar events for a meeting
router.get('/events/:meetingId', async (req, res) => {
  try {
    const meeting = await Meeting.findById(req.params.meetingId)
      .select('title calendarEvents');

    if (!meeting) {
      return res.status(404).json({ error: 'Meeting not found' });
    }

    res.json({
      success: true,
      meetingId: meeting._id,
      meetingTitle: meeting.title,
      calendarEvents: meeting.calendarEvents || []
    });

  } catch (error) {
    console.error('Get calendar events error:', error);
    res.status(500).json({
      error: 'Failed to retrieve calendar events',
      details: error.message
    });
  }
});

module.exports = router;
